/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.aabu.maintenence.dao;

import java.util.Date;
import edu.aabu.maintenence.dto.*;
import edu.aabu.maintenence.exceptions.*;
import edu.aabu.peaff.Peparty;
import java.util.List;

public interface MaintenanceOrdersDao
{
	/** 
	 * Inserts a new row in the maintenance_orders table.
	 */
	public void insert(MaintenanceOrders dto) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria ''.
	 */
	public MaintenanceOrders[] findAll() throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'order_no = :orderNo'.
	 */
	public MaintenanceOrders[] findWhereOrderNoEquals(int orderNo) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'order_year = :orderYear'.
	 */
	public MaintenanceOrders[] findWhereOrderYearEquals(short orderYear) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'pe_emp_no = :peEmpNo'.
	 */
	public MaintenanceOrders[] findWherePeEmpNoEquals(int peEmpNo) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'order_date = :orderDate'.
	 */
	public MaintenanceOrders[] findWhereOrderDateEquals(Date orderDate) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'problem_desc = :problemDesc'.
	 */
	public MaintenanceOrders[] findWhereProblemDescEquals(String problemDesc) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'pe_type_code = :peTypeCode'.
	 */
	public MaintenanceOrders[] findWherePeTypeCodeEquals(short peTypeCode) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'pe_main_code = :peMainCode'.
	 */
	public MaintenanceOrders[] findWherePeMainCodeEquals(short peMainCode) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'pe_section_code = :peSectionCode'.
	 */
	public MaintenanceOrders[] findWherePeSectionCodeEquals(short peSectionCode) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'pe_class_code = :peClassCode'.
	 */
	public MaintenanceOrders[] findWherePeClassCodeEquals(short peClassCode) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'emp_phone = :empPhone'.
	 */
	public MaintenanceOrders[] findWhereEmpPhoneEquals(String empPhone) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'emp_opinion = :empOpinion'.
	 */
	public MaintenanceOrders[] findWhereEmpOpinionEquals(String empOpinion) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'order_emerg = :orderEmerg'.
	 */
	public MaintenanceOrders[] findWhereOrderEmergEquals(short orderEmerg) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the criteria 'order_status = :orderStatus'.
	 */
	public MaintenanceOrdersDesc[] findWhereOrderStatusEquals(short orderStatus) throws MaintenanceOrdersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the maintenance_orders table that match the specified arbitrary SQL statement
	 */
	public MaintenanceOrders[] findByDynamicSelect(String sql, Object[] sqlParams) throws MaintenanceOrdersDaoException;

	/** 
	 * Returns all rows from the maintenance_orders table that match the specified arbitrary SQL statement
	 */
	public MaintenanceOrders[] findByDynamicWhere(String sql, Object[] sqlParams) throws MaintenanceOrdersDaoException;

	public List<Peparty> getEmpWorkPlaces(int pe_emp_no) throws MaintenanceOrdersDaoException;
	/**
	 * Inserts a new row in the maintenance_orders table.
	 */
	public int cancel(MaintenanceOrders dto) throws MaintenanceOrdersDaoException;
	public List<MaintenanceOrdersDesc> findByEmpNo(int peEmpNo,Peparty sec) throws MaintenanceOrdersDaoException;
	public MaintenanceOrdersDesc findByPk(int order_no,short orderYear) throws MaintenanceOrdersDaoException;
	public void update(MaintenanceOrders dto) throws MaintenanceOrdersDaoException ;
	public void updateOpinion(MaintenanceOrders dto) throws MaintenanceOrdersDaoException;
	public void updateStatus(MaintenanceOrders dto) throws MaintenanceOrdersDaoException;
        public  List<MaintenanceOrdersDesc> findByManager(int peEmpNo,short orderstatus) throws MaintenanceOrdersDaoException ;
	public MaintenanceOrdersDesc[] findWhereOrderStatusEqualsNew(short orderStatus,int empNo) throws MaintenanceOrdersDaoException;
}
