/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package edu.aabu.maintenence.jdbc;

import edu.aabu.maintenence.dao.*;
import edu.aabu.maintenence.factory.*;
import edu.aabu.peaff.Peparty;
import java.util.Date;
import edu.aabu.maintenence.dto.*;
import edu.aabu.maintenence.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

public class MaintenanceOrdersDaoImpl extends AbstractDAO implements MaintenanceOrdersDao {

    /**
     * The factory class for this DAO has two versions of the create() method - one that
    takes no arguments and one that takes a Connection argument. If the Connection version
    is chosen then the connection will be stored in this attribute and will be used by all
    calls to this DAO, otherwise a new Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;
    /**
     * All finder methods in this class use this SELECT constant to build their queries
     */
    protected final String SQL_SELECT = "SELECT order_no, order_year, pe_emp_no, order_date, problem_desc, pe_type_code, pe_main_code, pe_section_code, pe_class_code, emp_phone, emp_opinion, order_emerg, order_status, to_pe_type_code, to_pe_main_code, to_pe_section_code, to_pe_class_code FROM " + getTableName() + "";
    protected final String SQL_DELETE = "UPDATE " + getTableName() + " set order_status = 99 WHERE order_no = ? and order_year = ? ";
    /**
     * Finder methods will pass this value to the JDBC setMaxRows method
     */
    protected int maxRows;
    /**
     * SQL INSERT statement for this table
     */
    protected final String SQL_INSERT = "INSERT INTO " + getTableName() + 
            " ( order_no, order_year, pe_emp_no, order_date, problem_desc, pe_type_code, pe_main_code, pe_section_code, pe_class_code, emp_phone, emp_opinion, order_emerg, order_status,manager_id,address, to_pe_type_code, to_pe_main_code, to_pe_section_code, to_pe_class_code) " + 
            " VALUES ( ?, date_part('year',date('now')), ?, date('now'), ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,? )";
    /**
     * Index of column order_no
     */
    protected static final int COLUMN_ORDER_NO = 1;
    /**
     * Index of column order_year
     */
    protected static final int COLUMN_ORDER_YEAR = 2;
    /**
     * Index of column pe_emp_no
     */
    protected static final int COLUMN_PE_EMP_NO = 3;
    /**
     * Index of column order_date
     */
    protected static final int COLUMN_ORDER_DATE = 4;
    /**
     * Index of column problem_desc
     */
    protected static final int COLUMN_PROBLEM_DESC = 5;
    /**
     * Index of column pe_type_code
     */
    protected static final int COLUMN_PE_TYPE_CODE = 6;
    /**
     * Index of column pe_main_code
     */
    protected static final int COLUMN_PE_MAIN_CODE = 7;
    /**
     * Index of column pe_section_code
     */
    protected static final int COLUMN_PE_SECTION_CODE = 8;
    /**
     * Index of column pe_class_code
     */
    protected static final int COLUMN_PE_CLASS_CODE = 9;
    /**
     * Index of column emp_phone
     */
    protected static final int COLUMN_EMP_PHONE = 10;
    /**
     * Index of column emp_opinion
     */
    protected static final int COLUMN_EMP_OPINION = 11;
    /**
     * Index of column order_emerg
     */
    protected static final int COLUMN_ORDER_EMERG = 12;
    /**
     * Index of column order_status
     */
    protected static final int COLUMN_ORDER_STATUS = 13;
    /**
     * Index of column order_status
     */
    protected static final int COLUMN_MANAGER_ID = 14;
    /**
     * Index of column order_status
     */
    protected static final int COLUMN_ADDRESS = 15;
    /**
     * Number of columns
     */
    protected static final int TO_COLUMN_PE_TYPE_CODE = 16;
    /**
     * Index of column pe_main_code
     */
    protected static final int TO_COLUMN_PE_MAIN_CODE = 17;
    /**
     * Index of column pe_section_code
     */
    protected static final int TO_COLUMN_PE_SECTION_CODE = 18;
    /**
     * Index of column pe_class_code
     */
    protected static final int TO_COLUMN_PE_CLASS_CODE = 19; 
    /**
     * Index of column close_reason
     */
    protected static final int TO_COLUMN_CLOSE_REASON = 20;

    protected static final int NUMBER_OF_COLUMNS = 20;

    /**
     * Inserts a new row in the maintenance_orders table.
     */
    public void insert(MaintenanceOrders dto) throws MaintenanceOrdersDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final String SQL = "select ifnull(max(order_no) + 1,1) "
                + " FROM " + getTableName()
                + " WHERE order_year = date_part('year',date('now')) ";

        int order_no = 1;
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            stmt = conn.prepareStatement(SQL);
            rs = stmt.executeQuery();
            if (rs.next()) {
                order_no = rs.getInt(1);
            }
            dto.setOrderNo(order_no);
            stmt = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            stmt.setInt(index++, order_no);
            stmt.setInt(index++, dto.getPeEmpNo());
//			stmt.setTimestamp(index++, dto.getOrderDate()==null ? null : new java.sql.Timestamp( dto.getOrderDate().getTime() ) );
            stmt.setString(index++, dto.getProblemDesc());
            stmt.setShort(index++, dto.getPeTypeCode());
            stmt.setShort(index++, dto.getPeMainCode());
            stmt.setShort(index++, dto.getPeSectionCode());
            stmt.setShort(index++, dto.getPeClassCode());
            stmt.setString(index++, dto.getEmpPhone());
            stmt.setString(index++, dto.getEmpOpinion());
            stmt.setShort(index++, dto.getOrderEmerg());
            stmt.setShort(index++, (short) 1);
            stmt.setInt(index++, dto.getManagerId());
            stmt.setString(index++, dto.getAddress());

            stmt.setShort(index++, dto.getToPeTypeCode());
            stmt.setShort(index++, dto.getToPeMainCode());
            stmt.setShort(index++, dto.getToPeSectionCode());
            stmt.setShort(index++, dto.getToPeClassCode());

            System.out.println("Executing " + SQL_INSERT + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            dto.setOrderYear((short)Calendar.getInstance().get(Calendar.YEAR));
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            //reset(dto);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria ''.
     */
    public MaintenanceOrders[] findAll() throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT, null);
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'order_no = :orderNo'.
     */
    public MaintenanceOrders[] findWhereOrderNoEquals(int orderNo) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE order_no = ? ORDER BY order_no", new Object[]{new Integer(orderNo)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'order_year = :orderYear'.
     */
    public MaintenanceOrders[] findWhereOrderYearEquals(short orderYear) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE order_year = ? ORDER BY order_year", new Object[]{new Short(orderYear)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_emp_no = :peEmpNo'.
     */
    public MaintenanceOrders[] findWherePeEmpNoEquals(int peEmpNo) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE pe_emp_no = ? ORDER BY pe_emp_no", new Object[]{new Integer(peEmpNo)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'order_date = :orderDate'.
     */
    public MaintenanceOrders[] findWhereOrderDateEquals(Date orderDate) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE order_date = ? ORDER BY order_date", new Object[]{orderDate == null ? null : new java.sql.Timestamp(orderDate.getTime())});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'problem_desc = :problemDesc'.
     */
    public MaintenanceOrders[] findWhereProblemDescEquals(String problemDesc) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE problem_desc = ? ORDER BY problem_desc", new Object[]{problemDesc});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_type_code = :peTypeCode'.
     */
    public MaintenanceOrders[] findWherePeTypeCodeEquals(short peTypeCode) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE pe_type_code = ? ORDER BY pe_type_code", new Object[]{new Short(peTypeCode)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_main_code = :peMainCode'.
     */
    public MaintenanceOrders[] findWherePeMainCodeEquals(short peMainCode) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE pe_main_code = ? ORDER BY pe_main_code", new Object[]{new Short(peMainCode)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_section_code = :peSectionCode'.
     */
    public MaintenanceOrders[] findWherePeSectionCodeEquals(short peSectionCode) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE pe_section_code = ? ORDER BY pe_section_code", new Object[]{new Short(peSectionCode)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_class_code = :peClassCode'.
     */
    public MaintenanceOrders[] findWherePeClassCodeEquals(short peClassCode) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE pe_class_code = ? ORDER BY pe_class_code", new Object[]{new Short(peClassCode)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'emp_phone = :empPhone'.
     */
    public MaintenanceOrders[] findWhereEmpPhoneEquals(String empPhone) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE emp_phone = ? ORDER BY emp_phone", new Object[]{empPhone});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'emp_opinion = :empOpinion'.
     */
    public MaintenanceOrders[] findWhereEmpOpinionEquals(String empOpinion) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE emp_opinion = ? ORDER BY emp_opinion", new Object[]{empOpinion});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'order_emerg = :orderEmerg'.
     */
    public MaintenanceOrders[] findWhereOrderEmergEquals(short orderEmerg) throws MaintenanceOrdersDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE order_emerg = ? ORDER BY order_emerg", new Object[]{new Short(orderEmerg)});
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'order_status = :orderStatus'.
     */
    public MaintenanceOrdersDesc[] findWhereOrderStatusEquals(short orderStatus) throws MaintenanceOrdersDaoException {
        final String SQL = " select a.* ,b.sub_desc,c.pe_emp_name,d.pe_party_desc "
                + " from maintenance_orders a,pecodes b,peempinf c,peparty d "
                + " where b.main_code = 115 and"
                + "    b.sub_code = a.order_status and "
                + "    c.pe_emp_no = a.pe_emp_no and "
                + "    a.pe_type_code = d.pe_type_code and "
                + "    a.pe_main_code = d.pe_main_code and "
                + "    a.pe_section_code = d.pe_section_code and "
                + "    a.pe_class_code = d.pe_class_code and "
                + "    a.order_status = ? ";
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setShort(1, orderStatus);
            rs = stmt.executeQuery();

            // fetch the results
            // fetch the results
            List<MaintenanceOrdersDesc> retList = new ArrayList<MaintenanceOrdersDesc>();

            while (rs.next()) {
                MaintenanceOrdersDesc dto = new MaintenanceOrdersDesc();
                populateDto(dto, rs);
                dto.setOrderStatusDesc(rs.getString(16));
                dto.setEmpName(rs.getString(17));
                dto.setPepartydesc(rs.getString(18));
                retList.add(dto);
            }
            return retList.toArray(new MaintenanceOrdersDesc[0]);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }
    public MaintenanceOrdersDesc[] findWhereOrderStatusEqualsNew(short orderStatus,int empNo) throws MaintenanceOrdersDaoException {
        final String SQL = " select a.* ,b.sub_desc,c.pe_emp_name,d.pe_party_desc "
                + " from maintenance_orders a,pecodes b,peempinf c,peparty d,peempinf f "
                + " where b.main_code = 115 and"
                + "    b.sub_code = a.order_status and "
                + "    c.pe_emp_no = a.pe_emp_no and "
                + "    a.pe_type_code = d.pe_type_code and "
                + "    a.pe_main_code = d.pe_main_code and "
                + "    a.pe_section_code = d.pe_section_code and "
                + "    a.pe_class_code = d.pe_class_code and "
                + "    f.pe_emp_no = ? and "
                + "    f.pe_type_code = a.to_pe_type_code and "
                + "    f.pe_main_code = a.to_pe_main_code and "
                + "    a.order_status = ? ";
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setInt(1, empNo);
            stmt.setShort(2, orderStatus);
            rs = stmt.executeQuery();

            // fetch the results
            // fetch the results
            List<MaintenanceOrdersDesc> retList = new ArrayList<MaintenanceOrdersDesc>();

            while (rs.next()) {
                MaintenanceOrdersDesc dto = new MaintenanceOrdersDesc();
                populateDto(dto, rs);
                dto.setOrderStatusDesc(rs.getString("sub_desc"));
                dto.setEmpName(rs.getString("pe_emp_name"));
                dto.setPepartydesc(rs.getString("pe_party_desc"));
                retList.add(dto);
            }
            return retList.toArray(new MaintenanceOrdersDesc[0]);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Method 'MaintenanceOrdersDaoImpl'
     *
     */
    public MaintenanceOrdersDaoImpl() {
    }

    /**
     * Method 'MaintenanceOrdersDaoImpl'
     *
     * @param userConn
     */
    public MaintenanceOrdersDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Method 'getTableName'
     *
     * @return String
     */
    public String getTableName() {
        return "maintenance_orders";
    }

    /**
     * Fetches a single row from the result set
     */
    protected MaintenanceOrders fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            MaintenanceOrders dto = new MaintenanceOrders();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected MaintenanceOrders[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            MaintenanceOrders dto = new MaintenanceOrders();
            populateDto(dto, rs);
            resultList.add(dto);
        }

        MaintenanceOrders ret[] = new MaintenanceOrders[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(MaintenanceOrders dto, ResultSet rs) throws SQLException {
        dto.setOrderNo(rs.getInt(COLUMN_ORDER_NO));
        dto.setOrderYear(rs.getShort(COLUMN_ORDER_YEAR));
        dto.setPeEmpNo(rs.getInt(COLUMN_PE_EMP_NO));
        dto.setOrderDate(rs.getTimestamp(COLUMN_ORDER_DATE));
        dto.setProblemDesc(rs.getString(COLUMN_PROBLEM_DESC));
        dto.setPeTypeCode(rs.getShort(COLUMN_PE_TYPE_CODE));
        dto.setPeMainCode(rs.getShort(COLUMN_PE_MAIN_CODE));
        dto.setPeSectionCode(rs.getShort(COLUMN_PE_SECTION_CODE));
        dto.setPeClassCode(rs.getShort(COLUMN_PE_CLASS_CODE));
        dto.setEmpPhone(rs.getString(COLUMN_EMP_PHONE));
        dto.setEmpOpinion(rs.getString(COLUMN_EMP_OPINION));
        dto.setOrderEmerg(rs.getShort(COLUMN_ORDER_EMERG));
        dto.setOrderStatus(rs.getShort(COLUMN_ORDER_STATUS));
        dto.setManagerId(rs.getInt(COLUMN_MANAGER_ID));
        dto.setAddress(rs.getString(COLUMN_ADDRESS));

        dto.setToPeTypeCode(rs.getShort(TO_COLUMN_PE_TYPE_CODE));
        dto.setToPeMainCode(rs.getShort(TO_COLUMN_PE_MAIN_CODE));
        dto.setToPeSectionCode(rs.getShort(TO_COLUMN_PE_SECTION_CODE));
        dto.setToPeClassCode(rs.getShort(TO_COLUMN_PE_CLASS_CODE));
        
        dto.setCloseReason(rs.getString(TO_COLUMN_CLOSE_REASON));
         
    }

    /**
     * Resets the modified attributes in the DTO
     */
    protected void reset(MaintenanceOrders dto) {
    }

    /**
     * Returns all rows from the maintenance_orders table that match the specified arbitrary SQL statement
     */
    public MaintenanceOrders[] findByDynamicSelect(String sql, Object[] sqlParams) throws MaintenanceOrdersDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = sql;


            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }


            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the maintenance_orders table that match the specified arbitrary SQL statement
     */
    public MaintenanceOrders[] findByDynamicWhere(String sql, Object[] sqlParams) throws MaintenanceOrdersDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = SQL_SELECT + " WHERE " + sql;


            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }


            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public List<Peparty> getEmpWorkPlaces(int pe_emp_no) throws MaintenanceOrdersDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = "select a.pe_type_code,a.pe_main_code,a.pe_section_code,a.pe_class_code,"
                    + " b.pe_party_desc"
                    + " FROM peempinf a,peparty b "
                    + " WHERE a.pe_emp_no = ? AND "
                    + "     b.pe_type_code = a.pe_type_code AND "
                    + "     b.pe_main_code = a.pe_main_code AND "
                    + "     b.pe_section_code = a.pe_section_code AND "
                    + "     b.pe_class_code = a.pe_class_code  "
                    + " UNION "
                    + "select a.pe_type_code,a.pe_main_code,a.pe_section_code,a.pe_class_code,"
                    + " b.pe_party_desc"
                    + " FROM peadmin a,peparty b "
                    + " WHERE a.pe_emp_no = ? AND "
                    + "     a.pe_end_date = '' AND "
                    + "     b.pe_type_code = a.pe_type_code AND "
                    + "     b.pe_main_code = a.pe_main_code AND "
                    + "     b.pe_section_code = a.pe_section_code AND "
                    + "     b.pe_class_code = a.pe_class_code  ";


            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setInt(1, pe_emp_no);
            stmt.setInt(2, pe_emp_no);
            rs = stmt.executeQuery();

            // fetch the results
            List resultList = new ArrayList();
            while (rs.next()) {
                Peparty dto = new Peparty();
                dto.setPeTypeCode(rs.getShort(1));
                dto.setPeMainCode(rs.getShort(2));
                dto.setPeSectionCode(rs.getShort(3));
                dto.setPeClassCode(rs.getShort(4));
                dto.setPePartyDesc(rs.getString(5));
                resultList.add(dto);
            }

            return resultList;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public int cancel(MaintenanceOrders dto) throws MaintenanceOrdersDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
            stmt = conn.prepareStatement(SQL_DELETE);
            int index = 1;
            stmt.setInt(index++, dto.getOrderNo());
            stmt.setShort(index++, dto.getOrderYear());
            System.out.println("Executing " + SQL_DELETE + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            conn.commit();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
            return rows;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_emp_no = :peEmpNo'.
     */
    public List<MaintenanceOrdersDesc> findByEmpNo(int peEmpNo,Peparty sec) throws MaintenanceOrdersDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = "SELECT order_no, order_year, pe_emp_no, order_date, problem_desc,"
                    + " pe_type_code, pe_main_code, pe_section_code, pe_class_code, emp_phone,"
                    + " emp_opinion, order_emerg, order_status,manager_id,address,a.to_pe_type_code, "
                    + " a.to_pe_main_code, a.pe_section_code, a.pe_class_code,a.close_reason,b.sub_desc "
                    + " FROM " + getTableName() + " a,pecodes b "
                    + " WHERE pe_emp_no = ? "
                    + "         AND b.main_code = 115 "
                    + "         AND b.sub_code = a.order_status "
                    + "         AND a.order_status != 99 "
                    + "         AND a.to_pe_type_code  = ? "
                    + "         AND a.to_pe_main_code  = ? "
                    + "         AND a.to_pe_section_code  = ? "
                    + "         AND a.to_pe_class_code  = ? "
                    + " ORDER BY order_date desc ";

            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setInt(1, peEmpNo);
            stmt.setInt(2, sec.getPeTypeCode());
            stmt.setInt(3, sec.getPeMainCode());
            stmt.setInt(4, sec.getPeSectionCode());
            stmt.setInt(5, sec.getPeClassCode());
            rs = stmt.executeQuery();

            // fetch the results
            List resultList = new ArrayList();
            while (rs.next()) {
                MaintenanceOrdersDesc dto = new MaintenanceOrdersDesc();
                populateDto(dto, rs);
                dto.setOrderStatusDesc(rs.getString("sub_desc"));
                resultList.add(dto);
            }

            return resultList;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public void update(MaintenanceOrders dto) throws MaintenanceOrdersDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final String SQL = "UPDATE " + getTableName() + " set  problem_desc = ?,  "
                + " pe_type_code = ? , pe_main_code = ? , "
                + "pe_section_code = ? , pe_class_code = ? ,"
                + " emp_phone = ? ,  order_emerg = ? ,"
                + " address = ? ,"
                + " to_pe_type_code = ? ,  to_pe_main_code = ?, "
                + " to_pe_section_code = ? , to_pe_class_code = ? "
                + " where order_no = ? and order_year = ? ";

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            stmt = conn.prepareStatement(SQL);
            int index = 1;
            stmt.setString(index++, dto.getProblemDesc());
            stmt.setShort(index++, dto.getPeTypeCode());
            stmt.setShort(index++, dto.getPeMainCode());
            stmt.setShort(index++, dto.getPeSectionCode());
            stmt.setShort(index++, dto.getPeClassCode());
            stmt.setString(index++, dto.getEmpPhone());
            stmt.setShort(index++, dto.getOrderEmerg());
            stmt.setString(index++, dto.getAddress());
            stmt.setShort(index++, dto.getToPeTypeCode());
            stmt.setShort(index++, dto.getToPeMainCode());
            stmt.setShort(index++, dto.getToPeSectionCode());
            stmt.setShort(index++, dto.getToPeClassCode());
            stmt.setInt(index++, dto.getOrderNo());
            stmt.setShort(index++, dto.getOrderYear());
            System.out.println("Executing " + SQL + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public void updateOpinion(MaintenanceOrders dto) throws MaintenanceOrdersDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final String SQL = "UPDATE " + getTableName() + " set  emp_opinion = ?  "
                + " where order_no = ? and order_year = ? ";

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            stmt = conn.prepareStatement(SQL);
            int index = 1;
            stmt.setString(index++, dto.getEmpOpinion());
            stmt.setInt(index++, dto.getOrderNo());
            stmt.setShort(index++, dto.getOrderYear());
            System.out.println("Executing " + SQL + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public void updateStatus(MaintenanceOrders dto) throws MaintenanceOrdersDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL ="";
        if(dto.getOrderStatus()==3){
            SQL = "UPDATE " + getTableName() + " set  order_status = ? ,order_date=date('now'),manager_id=? "
                    + " where order_no = ? and order_year = ? ";
        }else {
            SQL = "UPDATE " + getTableName() + " set  order_status = ?  "
                    + " where order_no = ? and order_year = ? ";
        }
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            stmt = conn.prepareStatement(SQL);
            int index = 1;
            stmt.setShort(index++, dto.getOrderStatus());
            if(dto.getOrderStatus()==3){
                stmt.setInt(index++, dto.getManagerId());
            }
            stmt.setInt(index++, dto.getOrderNo());
            stmt.setShort(index++, dto.getOrderYear());
            System.out.println("Executing " + SQL + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public MaintenanceOrdersDesc findByPk(int orderNo, short orderYear) throws MaintenanceOrdersDaoException {
        final String SQL = " select a.* ,b.sub_desc,c.pe_emp_name,d.pe_party_desc "
                + " from maintenance_orders a,pecodes b,peempinf c,peparty d "
                + " where b.main_code = 115 and"
                + "    b.sub_code = a.order_status and "
                + "    c.pe_emp_no = a.pe_emp_no and "
                + "    a.pe_type_code = d.pe_type_code and "
                + "    a.pe_main_code = d.pe_main_code and "
                + "    a.pe_section_code = d.pe_section_code and "
                + "    a.pe_class_code = d.pe_class_code and "
                + "    a.order_no = ? and "
                + "    a.order_year = ? ";
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setInt(1, orderNo);
            stmt.setShort(2, orderYear);
            rs = stmt.executeQuery();

            // fetch the results
            MaintenanceOrdersDesc dto = new MaintenanceOrdersDesc();
            if (rs.next()) {
                System.out.println("\ndto inside loop before populate:- [--" + dto+ "--]\n");
                populateDto(dto, rs);
                System.out.println("\ndto inside loop afetr populate11111:- [--" + dto+ "--]\n");
                dto.setOrderStatusDesc(rs.getString(20));
                dto.setEmpName(rs.getString(21));
                dto.setPepartydesc(rs.getString(22));
            }
                System.out.println("\n------------\ndto outside loop after populate:- [--" + dto + "--]");
            return dto;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }
    }

    /**
     * Returns all rows from the maintenance_orders table that match the criteria 'pe_emp_no = :peEmpNo'.
     */
    public List<MaintenanceOrdersDesc> findByManager(int peEmpNo, short orderStatus) throws MaintenanceOrdersDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = " select a.* ,b.sub_desc,c.pe_emp_name,d.pe_party_desc,f.pe_party_desc "
                    + " from maintenance_orders a,pecodes b,peempinf c,peparty d,peadmin e,peparty f "
                    + " where b.main_code = 115 and "
                    + "     b.sub_code = a.order_status and "
                    + "     c.pe_emp_no = a.pe_emp_no and "
                    + "     a.pe_type_code = d.pe_type_code and "
                    + "     a.pe_main_code = d.pe_main_code and "
                    + "     a.pe_section_code = d.pe_section_code and "
                    + "     a.pe_class_code = d.pe_class_code and "
                    + "     f.pe_type_code = a.to_pe_type_code and "
                    + "     f.pe_main_code = a.to_pe_main_code and "
                    + "     f.pe_section_code = 0 and "
                    + "     f.pe_class_code = 0 and "
                    + "     a.order_status = ? and "
                    + "     a.pe_type_code = e.pe_type_code and "
                    + "     a.pe_main_code = e.pe_main_code and "
                    + "     e.pe_emp_no = ? and "
                    + "     e.pe_end_date = '' ";

            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            stmt.setShort(1, orderStatus);
            stmt.setInt(2, peEmpNo);
            rs = stmt.executeQuery();

            // fetch the results
            List resultList = new ArrayList();
            while (rs.next()) {
                MaintenanceOrdersDesc dto = new MaintenanceOrdersDesc();
                populateDto(dto, rs);
                dto.setOrderStatusDesc(rs.getString(20));
                dto.setEmpName(rs.getString(21));
                dto.setPepartydesc(rs.getString(22));
                dto.setToPepartydesc(rs.getString(23));
                resultList.add(dto);
            }

            return resultList;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new MaintenanceOrdersDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }
}
